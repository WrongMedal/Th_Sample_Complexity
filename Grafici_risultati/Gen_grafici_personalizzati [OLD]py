# -*- coding: utf-8 -*-
"""14. Sample_size plot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11ZK21aVqQPWZxpnBJCJwFD2QXC7TwyT2
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=False)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

import os
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

def plot_exp_results(rete, exp):
    diz_rete = {'A': 1, 'B': 2, 'C': 3}
    diz_esperimento = {1: "Primo", 2: "Secondo", 3: "Terzo", 4: "Quarto", 5: "Quinto"}

    # Percorso base
    base_path = '/content/drive/MyDrive/Tesi/5. Figure e tabelle'
    experiment_folder = f"{exp}. {diz_esperimento[exp]} esperimento"
    file_name = f"Rete{rete.upper()}.csv"
    full_path = os.path.join(base_path, experiment_folder, f"{diz_rete[rete]}. {file_name}")
    output_folder = os.path.dirname(full_path)

    print(f"üìÇ Caricamento file: {full_path}")

    # Lettura CSV
    try:
        df = pd.read_csv(full_path)
    except FileNotFoundError:
        print("‚ùå File non trovato. Controlla che il percorso e i nomi siano corretti.")
        return

    # Pulizia e conversione tipi
    for col in ['sample_size', 'test_acc', 'test_loss']:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    df = df.dropna(subset=['layer_structure', 'sample_size', 'test_acc', 'test_loss', 'seed'])

    # Media sui seed
    grouped = df.groupby(['layer_structure', 'sample_size']).agg({
        'test_acc': 'mean',
        'test_loss': 'mean'
    }).reset_index()

    # Stile grafico
    sns.set(style="whitegrid")
    layer_structures = grouped['layer_structure'].unique()
    palette = sns.color_palette("Set2", len(layer_structures))

    # üîß Crea figura con 2 subplot affiancati
    fig, axes = plt.subplots(1, 2, figsize=(16, 6))

    # üîµ Subplot 1: Accuracy
    for i, ls in enumerate(layer_structures):
        data = grouped[grouped['layer_structure'] == ls]
        axes[0].plot(data['sample_size'], data['test_acc'], label=f"{ls}", marker='o', color=palette[i])
    axes[0].set_title(f"[Exp {exp} - Rete {rete.upper()}] Test Accuracy on sample size")
    axes[0].set_xlabel("Sample Size")
    axes[0].set_ylabel("Test Accuracy")
    axes[0].legend(title="Layer Structure")

    # üî¥ Subplot 2: Loss
    for i, ls in enumerate(layer_structures):
        data = grouped[grouped['layer_structure'] == ls]
        axes[1].plot(data['sample_size'], data['test_loss'], label=f"{ls}", marker='o', color=palette[i])
    axes[1].set_title(f"[Exp {exp} - Rete {rete.upper()}] Test Loss on sample size")
    axes[1].set_xlabel("Sample Size")
    axes[1].set_ylabel("Test Loss")
    axes[1].legend(title="Layer Structure")

    plt.tight_layout()

    # üíæ Salva immagine unica
    save_path = os.path.join(output_folder, f"Exp{exp}_Rete{rete.upper()}_Accuracy_Loss.png")
    plt.savefig(save_path)
    print(f"‚úÖ Grafico combinato salvato in: {save_path}")
    plt.show()

#@title Esempio
plot_exp_results(rete='B', exp=2)
